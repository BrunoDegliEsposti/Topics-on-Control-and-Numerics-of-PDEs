// Bug in GMRES corrected January 3rd 2016: some conj were missing
// Preconditioned GMRES algorithm Applied to the system
// M^{-1}Aglobal x = M^{-1}b
// Here Aglobal denotes the global matrix
// M^{-1} is the RAS preconditioner based on domain decomposition
// In order to use the GMRES routine define first the matrix-vector product
/*# debutGlobalMatvec #*/
func complex[int] A(complex[int] &x)
{
	// Matrix vector product with the global matrix
	Vh<complex> Ax;
	Ax[]= Aglobal*x;
	return Ax[];
}
/*# finGlobalMatvec #*/
/*# debutRASPrecond #*/
// and the application of the preconditioner
func complex[int] RAS(complex[int] &l)
{
   // Application of the RAS preconditioner
   // M^{-1}*y = \sum Ri^T*Di*Ai^{-1}*Ri*y
   // Ri restriction operators, Ai local matrices
   Vh<complex> s = 0;
   for(int i=0; i<npart; ++i)  {
       complex[int] bi = Rih[i]*l;           // restricts rhs
       complex[int] ui = aR[i] ^-1 * bi;  // local solves
       bi = Dih[i]*ui;                      // partition of unity
       s[] += Rih[i]'*bi;                  // prolongation
      }
   return s[];
}
/*# finRASPrecond #*/
/*# debutGMRESsolve #*/ // il manque les corrections Ã  GMRES non????, cf notes de cours aussi dans le script GMRES???
func complex[int] GMRES(complex[int] x0, real eps, int nbiter)
{
	ofstream filei("Convprec.m");
	Vh<complex> r, z, v,w,er, un;
	Vh<complex>[int] V(nbiter);                 // orthonormal basis
	complex[int,int] Hn(nbiter+2,nbiter+1);     // Hessenberg matrix
	Hn = 0.;
	complex[int,int] rot(2,nbiter+2);
	rot = 0.;
	complex[int] g(nbiter+1),g1(nbiter+1);
	g = 0.;  g1 = 0.;
	r[] = A(x0);
	r[] -= rhsglobal[];
	r[] *= -1.0;
	z[] = RAS(r[]);             // z= M^{-1}(b-A*x0)
	g[0] = z[].l2;      // initial residual norm
	filei << "relres("+1+")=" << g[0] << ";" << endl;
	V[0][]=1/g[0]*z[];           // first basis vector
	for(int it=0; it<nbiter; it++){
	  	 v[] = A(V[it][]);
	  	 w[] = RAS(v[]);   // w = M^{-1}A*V_it
	  	 for(int i=0; i<it+1; i++) {
            Hn(i,it) = w[]'*V[i][];
            w[] -=  Hn(i,it)*V[i][];
         }
	  	 Hn(it+1,it) = w[].l2;
	  	 complex aux = Hn(it+1,it);
	  	 for(int i=0; i<it; i++){ 	 // QR decomposition of Hn
	  	 	complex aa = conj(rot(0,i))*Hn(i,it)+rot(1,i)*Hn(i+1,it);
	  	 	complex bb =      -rot(1,i)*Hn(i,it)+rot(0,i)*Hn(i+1,it);
	  	 	Hn(i,it) = aa;
	  	 	Hn(i+1,it) = bb;
         }
         complex sq = sqrt( conj(Hn(it,it))*Hn(it,it) + Hn(it+1,it)*Hn(it+1,it) );
         rot(0,it) = Hn(it,it)/sq;
         rot(1,it) = Hn(it+1,it)/sq;         
   	  	 Hn(it,it) = conj(rot(0,it))*Hn(it,it)+rot(1,it)*Hn(it+1,it);
  	  	 Hn(it+1,it) =  0.; 
	   	 g[it+1] = -rot(1,it)*g[it]; 
    	 g[it] = conj(rot(0,it))*g[it]; 
	  	 complex[int] y(it+1);     	// Reconstruct the solution
	  	 for(int i=it; i>=0; i--) {
	  	 	g1[i] = g[i];
	  	 	for(int j=i+1; j<it+1; j++){
	  	 	   	g1[i] = g1[i]-Hn(i,j)*y[j];
	  	 	}
	  	 	y[i]=g1[i]/Hn(i,i);
         }
	  	 un[] = x0;
	  	 for(int i=0;i<it+1;i++){
            un[]= un[]+ y[i]*V[i][];
	  	 }
         er[] = un[] - uglob[];
         real relres = abs(g[it+1]);
         real relerr = er[].l2/uglob[].l2;
         cout << "It: "<< it << " Residual = " << relres  <<  " Relative L2 Error =  "<<  relerr << endl;
         int j = it+2;
         filei << "relres("+j+")=" << relerr/*relres*/ << ";" << endl;
         if(relerr < eps) {//relres
             cout << "GMRES has converged in " + it + " iterations " << endl;
             cout << "The relative residual is " +  relres << endl;
             break;	}
         V[it+1][]=1/aux*w[];
         Vh realsol = real(un);
          plot(realsol, dim=3, cmm="Approximate solution at step " + it, value=1, fill=1,wait=0);
     }
     return un[];
}
/*# finGMRESsolve #*/