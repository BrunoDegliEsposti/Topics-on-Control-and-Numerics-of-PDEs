load "metis"
load "medit"
int nn=8,mm=8;							  // number of the domains in each direction
int npart= nn*mm;						  // total number of domains
int nloc = 11;                                  // local no of dof per domain in one direction            
bool withmetis = 1;                         // 1: Metis decomp; 0: uniform decomp
bool withBNN=1;                            // 0: BNN wo coarse grid; 1: BNN with coarse grid
int sizeovr = 0;                               // size of the overlap (BNN - Schur complement method) 
real allong = real(nn)/real(mm);     // aspect ratio of the global domain
// Mesh of a rectangular domain
mesh Th=square(nn*nloc,mm*nloc,[x*allong,y]);
fespace Vh(Th,P1);
fespace Ph(Th,P0);
Ph part;                                            // piecewise constant function 
int[int] lpart(Ph.ndof);                       // giving the decomposition
// Domain decomposition data structures
mesh[int] aTh(npart);                       // sequence of ovr. meshes 
matrix[int] Rih(npart);                       // local restriction operators 
matrix[int] Dih(npart);                       // partition of unity operators
int[int] Ndeg(npart);                          // number of dof for each mesh
real[int] AreaThi(npart);                    // area of each subdomain
matrix[int] aA(npart),aN(npart);        // local matrices
Vh[int]  Z(npart);                               // coarse space
// Definition of the problem to solve
// Delta (u) = f, u = 1 on the global boundary
int[int] chlab=[1,1  ,2,1  ,3,1  ,4,1  ];
Th=change(Th,refe=chlab);
Vh intern;
intern = (x>0) && (x<allong) && (y>0) && (y<1);
Vh bord = 1-intern;
macro Grad(u) [dx(u),dy(u)]              // EOM 
func f = 1;                                          // right hand side 
func g = 1 ;                                      // Dirichlet data
func kappa = 1.;                                 // viscosity
func eta = 0;
real etan = 1.e-5;
Vh rhsglobal,uglob;                            // rhs and solution of the global problem  
varf vaglobal(u,v) = int2d(Th)(eta*u*v+kappa*Grad(u)'*Grad(v))
                                +on(1,u=g) + int2d(Th)(f*v);
matrix Aglobal;
// Iterative solver
real tol=1e-7;                                      // tolerance for the iterative method
int maxit=300;                                    // maximum number of iterations