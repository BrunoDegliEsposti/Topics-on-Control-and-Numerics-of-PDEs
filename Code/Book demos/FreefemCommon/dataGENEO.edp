load "metis"
load "medit"
int nn=3,mm=2;							// number of the domains in each direction
int npart= nn*mm;						// total number of domains
int nloc = 30;								// local no of dof per domain in one direction            
bool withmetis = 1;						// =1 (Metis decomp) =0 (uniform decomp) 
int sizeovr = 1;								// size of the overlap
int nev = 2;									// maximum size of the GENEO coarse space per subdomain ( nev = -1// Nicolaides Coarse space)
													// 
int ncoarsespace = abs(nev*npart);
real tauThresholdGeneo = .1;
real allong = real(nn)/real(mm);     // aspect ratio of the global domain
// Mesh of a rectangular domain
mesh Th=square(nn*nloc,mm*nloc,[x*allong,y]);
fespace Vh(Th,P1);
fespace Ph(Th,P0);
Ph part;                                            // piecewise constant function 
int[int] lpart(Ph.ndof);                       // giving the decomposition
// Domain decomposition data structures
mesh[int] aTh(npart);                       // sequence of ovr. meshes 
matrix[int] Rih(npart);                       // local restriction operators 
matrix[int] Dih(npart);                       // partition of unity operators
int[int] Ndeg(npart);                          // number of dof for each mesh
real[int] AreaThi(npart);                    // area of each subdomain
matrix[int] aA(npart);                        // local Dirichlet matrices
matrix[int] aN(npart);                        // local Neumann matrices
matrix[int] aAweighted(npart);          // local weighted matrices
Vh[int]  Z(ncoarsespace);                 // coarse space  
// Definition of the problem to solve
// Delta (u) = f, u = 1 on the global boundary
//int[int] chlab=[1,1  ,2,2  ,3,1  ,4,4  ];
//Th=change(Th,refe=chlab);
macro Grad(u) [dx(u),dy(u)]             // EOM 
func f = 1;                                         // right hand side 
func g = 0 ;                                       // Dirichlet data
//func kappa =1+1e6*((y>0.2)*(y<0.4)+(y<0.8)*(y>0.6));
func real kappa(real a, real b)
{
	if ( ((b>0.2) && (b<0.4)) )
	{
		return 1.+1.e6;//4
	}
	else if ( ((b<0.8) && (b>0.6)) )
	{
		return 1.+1.e5;//3
	}
	else
	{
		return 1.;
	}
}
Ph ka = kappa(x,y);
ka = 1.;// un comment for highly heterogeneous coeff. 
plot(ka,value=1,fill=1,cmm="Coefficient de diffusion",ps="coefficient.eps",wait=1);
func eta = 1.e-8;//1.e-8;
Vh rhsglobal,uglob;                            // rhs and solution of the global problem  
varf vaglobal(u,v) = int2d(Th)(eta*u*v+ka*Grad(u)'*Grad(v))
                                +on(1,u=g) + int2d(Th)(f*v);
matrix Aglobal;
// Iterative solver
real tol=1.e-6;                                     // tolerance for the iterative method
int maxit=200;                                    // maximum number of iterations