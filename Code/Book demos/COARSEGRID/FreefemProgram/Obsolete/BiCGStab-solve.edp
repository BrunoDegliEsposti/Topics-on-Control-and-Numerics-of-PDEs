ofstream filei("Convprec.m");
func real[int] BICGSTAB(real[int] xi, real eps, int nbiter)
{
	Vh r, rb, rs, er, un, p, yn, zn, v, t, tn;
	un[] = xi;	
	r[] = A(un[]);
    r[] -= rhsglobal[];     
    r[] *= -1.0; 	
    rb[] = r[];
	
	real rho = 1.;
	real alpha = 1.;
	real omega = 1.;
	p[] = 0; v[] = 0;	
	real rhonew, beta;
	
	for(int it =1;it<nbiter;it++)
	  {	
        rhonew = rb[]'*r[];                 // rhoi = (rb,rim1);             
        beta = (rhonew/rho)*(alpha/omega);  // beta = (rhoi/rhoim1)*(alpha/omega); 
        p[] -=  omega*v[];                  // pi = rim1 + beta*(pim1 - omega*vim1);
        p[] *= beta;
        p[] += r[];
		
        yn[] = Mm1(p[]);                    // y = Mm1*pi; vi = A*y;
        v[] = A(yn[]);
        alpha = rhonew/(rb[]'*v[]);         // alpha = rhoi/(rb'*vi);	 
        rs[] = r[];                         // s = rim1 - alpha*vi;
        rs[] -= alpha*v[];
        zn[] = Mm1(rs[]);                   // z = Mm1*s; t = A*z;
        t[] = A(zn[]);
		 
        tn[] = Mm1(t[]);                    // tn = Mm1*t;
        omega = (tn[]'*zn[])/(tn[]'*tn[]);  // omega = (Mm1*t,Mm1*s)/(Mm1*t,Mm1*t);
		
        un[] += alpha*yn[];                 // xi = xim1 + alpha*y + omega*z;
        un[] += omega*zn[]; 
        r[] = rs[];
        r[] -= omega*t[];
		
        er = un - uglob;
        real relres = sqrt(r[]'*r[]);
        
        if (it == 1)
          real relres0 = relres;  
        relres = relres/relres0;
        
        cout << "It: "<< it << " ||Er||_inf = " << er[].linfty << endl; 
        int j = it+1;
        filei << "err("+j+")=" << er[].linfty << ";" << endl;        
        if ( er[].linfty < eps )
        {
        	cout << "BICGSTAB has converged in " + it + " iterations " << endl;
            cout << "The final relative residual is " +  relres << endl; 
            break;	
        }	
        rho = rhonew;
     }
     return un[];	
}
Vh un = 0, er, sol;                        // initial guess
sol[] =  BICGSTAB(un[], 1.e-6, 100);
plot(sol,dim=3,wait=1,cmm="Final solution",value =1,fill=1);
er[] = sol[]-uglob[];
cout << "Final error = " << er[].linfty/uglob[].linfty << endl;  
